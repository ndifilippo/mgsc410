substr(x, -1)
s <- "aldfjadljkfa1"
substr(s -1)
substr(s, -1)
substr(s, -1, -2)
substr(s, -1, -4)
substr(s, 2, 4)
str_sub(s, -1)
library(stringr)
str_sub(s, -1)
install.packages("benchmarkme")
library(benchmarkme)
get_ram()
memory.limit()
res = benchmark_std()
plot(res)
```{r LAXTEX}
```{r LATEX}
```{r }
print("HI")
library(lubridate)
library(devtools)
library(fastDummies)
library(tidyverse)
library(randomForest)
setwd("C:/git/mgsc410/datasets")
# import data
raw <- read.csv("sales_feat_dma.csv", stringsAsFactors = F)
# clean data
raw$date_id <- mdy(raw$date_id)
# transform categorical variables
categ_var <- dummy_columns(raw$dma)
type.dum <- dummy_columns(raw$type)
data <- cbind(raw, categ_var)
# variables used in regression
data <- select(data, -store, -dma, -msa, -".data", -markdown_1,-markdown_2,-markdown_3,-markdown_4,-markdown_5, -date_id, -dept)
# transform dates to discrete
data$month <- as.factor(data$month)
data$year <- as.factor(data$year)
# linear regression
fit <- lm(weekly_sales ~., data = data)
summary(fit)
stargazer(fit, type = "html")
library(stargazer)
stargazer(fit, type = "html")
library(stargazer)
stargazer(fit, type = "html")
```{r echo=FALSE}
library(stargazer)
stargazer(fit$coefficients, type = "html")
stargazer(fit, type = "html")
stargazer(fit, type = "text")
stargazer(fit, type = "pdf")
stargazer(fit, type = "latex")
stargazer(fit, type = "html")
stargazer(fit, type = "text")
```{r, results='asis', echo=FALSE}
stargazer(fit, type = "latex")
---
```{r, results='asis', echo=FALSE}
library(stargazer)
stargazer(fit, type = "latex")
```
# linear regression
fit <- lm(weekly_sales ~. -.data_Chicago, data = data)
summary(fit)
---
```{r, results='asis', echo=FALSE}
library(stargazer)
stargazer(fit, type = "latex")
```
---
```{r, results='asis', echo=FALSE}
library(stargazer)
stargazer(fit, type = "latex")
```
```{r, results='asis', echo=FALSE}
library(stargazer)
stargazer(fit, type = "latex")
stargazer(fit, type = "html")
stargazer(fit, type = "texy")
stargazer(fit, type = "tety")
stargazer(fit, type = "text")
stargazer(fit, type = "latex")
summary(fit)
stargazer(fit, type = "latex")
{r mylatextable, results='asis', echo=FALSE}
```{r mylatextable, results='asis', echo=FALSE}
library(stargazer)
stargazer(fit, type = "latex")
knitr::opts_chunk$set(echo = FALSE)
library(stargazer)
stargazer(fit, type = "text")
# import data
raw <- read.csv("sales_feat_dma.csv", stringsAsFactors = F)
# clean data
raw$date_id <- mdy(raw$date_id)
# transform categorical variables
categ_var <- dummy_columns(raw$dma)
type.dum <- dummy_columns(raw$type)
data <- cbind(raw, categ_var)
# variables used in regression
data <- select(data, -store, -dma, -msa, -".data", -markdown_1,-markdown_2,-markdown_3,-markdown_4,-markdown_5, -date_id, -dept)
colnames(data)
# variables used in regression
data <- select(data, -store, -dma, -msa, -".data", -markdown_1,-markdown_2,
-markdown_3,-markdown_4,-markdown_5, -date_id, -dept,
-.data_Austin, -'.data_Orlando-Daytona Beach-Melbourne')
library(lubridate)
library(devtools)
library(fastDummies)
library(tidyverse)
library(randomForest)
setwd("C:/git/mgsc410/datasets")
# import data
raw <- read.csv("sales_feat_dma.csv", stringsAsFactors = F)
# clean data
raw$date_id <- mdy(raw$date_id)
# transform categorical variables
categ_var <- dummy_columns(raw$dma)
type.dum <- dummy_columns(raw$type)
data <- cbind(raw, categ_var)
# variables used in regression
data <- select(data, -store, -dma, -msa, -".data", -markdown_1,-markdown_2,
-markdown_3,-markdown_4,-markdown_5, -date_id, -dept,
-.data_Austin, -'.data_Orlando-Daytona Beach-Melbourne')
library(lubridate)
library(devtools)
library(fastDummies)
library(tidyverse)
library(randomForest)
setwd("C:/git/mgsc410/datasets")
# import data
raw <- read.csv("sales_feat_dma.csv", stringsAsFactors = F)
# clean data
raw$date_id <- mdy(raw$date_id)
# transform categorical variables
categ_var <- dummy_columns(raw$dma)
type.dum <- dummy_columns(raw$type)
data <- cbind(raw, categ_var)
# variables used in regression
data <- select(data, -store, -dma, -msa, -".data", -markdown_1,-markdown_2,
-markdown_3,-markdown_4,-markdown_5, -date_id, -dept,
-.data_Austin, -'.data_Orlando-Daytona Beach-Melbourne',
-.data_Charlotte, -'.data_Tampa-St Petersburg',
-'.data_Salt Lake City')
# transform dates to discrete
# variables used in regression
data <- select(data, -store, -dma, -msa, -".data", -markdown_1,-markdown_2,
-markdown_3,-markdown_4,-markdown_5, -date_id, -dept,
-.data_Austin, -'.data_Orlando-Daytona Beach-Melbourne',
-.data_Charlotte, -'.data_Tampa-St Petersburg',
-'.data_Salt Lake City', -'.data_Kansas City')
raw <- read.csv("sales_feat_dma.csv", stringsAsFactors = F)
# clean data
raw$date_id <- mdy(raw$date_id)
# transform categorical variables
categ_var <- dummy_columns(raw$dma)
type.dum <- dummy_columns(raw$type)
data <- cbind(raw, categ_var)
# variables used in regression
data <- select(data, -store, -dma, -msa, -".data", -markdown_1,-markdown_2,
-markdown_3,-markdown_4,-markdown_5, -date_id, -dept,
-.data_Austin, -'.data_Orlando-Daytona Beach-Melbourne',
-.data_Charlotte, -'.data_Tampa-St Petersburg',
-'.data_Salt Lake City', -'.data_Kansas City')
# transform dates to discrete
data$month <- as.factor(data$month)
data$year <- as.factor(data$year)
# linear regression
fit <- lm(weekly_sales ~. -.data_Chicago, data = data)
summary(fit)
colnames(data)
```{r word_table, comment = ''}
stargazer(fit, type = "text")
plot(data$weekly_sales, data$size)
plot(data$weekly_sales, data$cpi)
# import data
raw <- read.csv("sales_feat_dma.csv", stringsAsFactors = F)
xy <- filter(raw, store =1 )
xy <- filter(raw, store == 1 )
yz <- filter(raw, year == 2010)
plot(weekly_sales)
plot(yz$weekly_sales)
plot(yz$weekly_sales, type = 'l')
de <- filter(raw, dept == 1)
plot(yz$weekly_sales, type = 'l')
plot(de$weekly_sales, type = 'l')
ggplot() + geom_line(aes(x = mdy(date_id), y = de$weekly_sales))
ggplot() + geom_line(aes(x = mdy(de$date_id), y = de$weekly_sales))
ggplot() + geom_line(aes(x = mdy(de$date_id), y = de$months))
ggplot() + geom_line(aes(x = mdy(de$month), y = de$weekly_sales))
ggplot() + geom_line(aes(x = (de$month), y = de$weekly_sales))
ggplot() + geom_line(aes(x = dmy(de$date_id), y = de$weekly_sales))
View(yz)
