dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (matchDMA >= 1){
result <- c(result, c(matchDMA, pop[i]))
}
return(result)
}
x <- match_string(dirty_dma, dma_data$Name)
View(x)
View(x)
View(x)
;
adlfkej
[oe]
ajke
match_string <- function(pop, dma){
result <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (matchDMA >= 1){
result <- c(result, c(matchDMA, pop[i]))
}
return(result)
}
x <- match_string(dirty_dma, dma_data$Name)
e;ojfa[ejfa]
eae]-fia]-efia]-sodf
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (matchDMA >= 1){
result <- c(result, c(matchDMA, pop[i]))
}
return(result)
}
}
x <- match_string(dirty_dma, dma_data$Name)
View(x)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- dirty_dma$X.5
dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (matchDMA >= 1){
result <- c(result, matchDMA)
pop_matched <- c(pop_matched, pop[i])
}
return(result)
}
}
x <- match_string(dirty_dma, dma_data$Name)
dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (matchDMA >= 1){
result <- c(result, matchDMA)
pop_matched <- c(pop_matched, pop[i])
}
return(cbind(result, pop_matched))
}
}
x <- match_string(dirty_dma, dma_data$Name)
View(x)
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (matchDMA >= 1){
result <- c(result, matchDMA)
pop_matched <- c(pop_matched, pop[i])
print(result)
}
return(cbind(result, pop_matched))
}
}
x <- match_string(dirty_dma, dma_data$Name)
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (matchDMA >= 1){
result <- c(result, matchDMA)
pop_matched <- c(pop_matched, pop[i])
print(result)
}
}
return(cbind(result, pop_matched))
}
x <- match_string(dirty_dma, dma_data$Name)
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (length(a) != 0){
result <- c(result, matchDMA)
pop_matched <- c(pop_matched, pop[i])
print(result)
}
}
return(cbind(result, pop_matched))
}
x <- match_string(dirty_dma, dma_data$Name)
dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (length(matchDMA) != 0){
result <- c(result, matchDMA)
pop_matched <- c(pop_matched, pop[i])
print(result)
}
}
return(cbind(result, pop_matched))
}
x <- match_string(dirty_dma, dma_data$Name)
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (length(matchDMA) != 0){
print(paste(matchDMA, pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA], pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .001)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .1)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .5)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .2)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .3)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "" | population$X.5 = "#N/A")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .3)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
print(population$X.5)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "" | population$X.5 = "#N/A")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .3)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "" || population$X.5 = "#N/A")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .3)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- filter(population, population$X.5 = "#N/A")
dirty_dma <- dirty_dma$X.5
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .3)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
print(dirty_dma)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- filter(population, population$X.5 = "#N/A")
dirty_dma <- dirty_dma$X.5
print(dirty_dma)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- filter(population, population$X.5 != "#N/A")
print(dirty_dma)
# dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# function matches uses agrep to find similarity in strings
match_string <- function(pop, dma){
result <- c()
pop_matched <- list()
for (i in 1:length(pop)) {
matchDMA <- agrep(pop[i], dma, ignore.case = TRUE, max.distance = .3)
if (length(matchDMA) != 0){
print(paste(dma[matchDMA],",", pop[i]))
}
}
}
x <- match_string(dirty_dma, dma_data$Name)
dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
dirty_dma <- filter(population, population$X.5 != "")
dirty_dma <- filter(population, population$X.5 != "#N/A")
print(dirty_dma)
dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
# clean population
dirty_dma <- filter(population, population$X.5 != "")
print(dirty_dma)
# clean population
dirty_dma <- filter(population$X.5, population$X.5 != "")
# clean population
dirty_dma <- filter(population, population$X.5 != "")
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
x <- filter(population, population$X.5 != "")
dirty_dma <- x$
print(dirty_dma)
dirty_dma <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
dirty_dma <- x$X.5
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
x <- filter(population, population$X.5 != "")
dirty_dma <- x$X.5
clean_pop <- gsub("\\s*\\([^\\)]+\\)","",as.character(x))
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
population <- read.csv("population_dirty.csv", stringsAsFactors = F)
dma_data <- read.csv("dma_data.csv", stringsAsFactors = F)
# clean population
x <- filter(population, population$X.5 != "")
dirty_dma <- x$X.5
clean_pop <- gsub("\\s*\\([^\\)]+\\)","",as.character(x))
clean_pop <- gsub("\\s*\\([^\\)]+\\)","",as.character(dirty_dma))
write.csv(clean_pop, "clean_pop.csv")
clean_pop
for ( i in 1:length(clean_pop)) {
if(tolower(clean_pop[i]) %in% dma_data$Name)
print(clean_pop[i])
}
for ( i in 1:length(clean_pop)) {
if(tolower(clean_pop[i]) %in% dma_data$Name)
print(clean_pop[i])
}
for ( i in 1:length(clean_pop)) {
if(tolower(clean_pop[i]) %in% dma_data$Name){
print(clean_pop[i])
}
}
msa <- read.csv("msa_data.csv")
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
msa <- read.csv("msa_data.csv")
View(msa)
msa$date
msa$date <- substring(msa$date, 1, 5)
msa$date
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
msa <- read.csv("msa_data.csv")
msa$date <- substring(msa$date, 1, 4)
msa$date
View(msa)
colnames(msa)
colnames(msa) <- gsub(".", "_", colnames(msa))
View(msa)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
msa <- read.csv("msa_data.csv")
# clean date
msa$date <- substring(msa$date, 1, 4)
View(msa)
colnames(msa) <- str_replace(".", "_", colnames(msa))
View(msa)
colnames(msa) <- str_replace(colnames(msa), ".", "_")
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
msa <- read.csv("msa_data.csv")
# clean date
msa$date <- substring(msa$date, 1, 4)
colnames(msa) <- str_replace(colnames(msa), ".", "_")
View(msa)
colnames(msa) <- str_replace_all(colnames(msa), ".", "_")
View(msa)
colnames(msa) <- tolower(gsub("\\.", "_", colnames(msa)))
View(msa)
library(stringr)
library(tidyverse)
setwd("C:/git/mgsc410/datasets")
msa <- read.csv("msa_data.csv")
# clean date
msa$date <- substring(msa$date, 1, 4)
colnames(msa) <- tolower(gsub("\\.", "_", colnames(msa)))
View(msa)
write.csv("msa_data.csv")
write.csv(msa,"msa_data.csv")
